# Do not edit. File was generated by make-opers!

from . import core
from .model import Operand
from .core import wrap_function

nan: float = float('NAN')


@wrap_function(core.AVGPRICE)
class AVGPRICE(Operand):
    def __call__(self, prices):
        return core.AVGPRICE(prices)


@wrap_function(core.TYPPRICE)
class TYPPRICE(Operand):
    def __call__(self, prices):
        return core.TYPPRICE(prices)


@wrap_function(core.WCLPRICE)
class WCLPRICE(Operand):
    def __call__(self, prices):
        return core.WCLPRICE(prices)


@wrap_function(core.MIDPRICE)
class MIDPRICE(Operand):
    def __call__(self, prices):
        return core.MIDPRICE(prices)


@wrap_function(core.PRICE)
class PRICE(Operand):
    def __init__(self, item: str = None):
        self.item = item

    def __call__(self, prices):
        return core.PRICE(prices, item=self.item)


@wrap_function(core.CROSSOVER)
class CROSSOVER(Operand):
    def __init__(self, level: float = 0.0, *, item: str = None):
        self.level = level
        self.item = item

    def __call__(self, series):
        return core.CROSSOVER(series, level=self.level, item=self.item)


@wrap_function(core.CROSSUNDER)
class CROSSUNDER(Operand):
    def __init__(self, level: float = 0.0, *, item: str = None):
        self.level = level
        self.item = item

    def __call__(self, series):
        return core.CROSSUNDER(series, level=self.level, item=self.item)


@wrap_function(core.FLAG_ABOVE)
class FLAG_ABOVE(Operand):
    def __init__(self, level: float = 0.0, *, na_value: float = nan, item: str = None):
        self.level = level
        self.na_value = na_value
        self.item = item

    def __call__(self, series):
        return core.FLAG_ABOVE(series, level=self.level, na_value=self.na_value, item=self.item)


@wrap_function(core.FLAG_BELOW)
class FLAG_BELOW(Operand):
    def __init__(self, level: float = 0.0, *, na_value: float = nan, item: str = None):
        self.level = level
        self.na_value = na_value
        self.item = item

    def __call__(self, series):
        return core.FLAG_BELOW(series, level=self.level, na_value=self.na_value, item=self.item)


@wrap_function(core.INVERT_FLAG)
class INVERT_FLAG(Operand):
    def __init__(self, *, na_value: float = nan, item: str = None):
        self.na_value = na_value
        self.item = item

    def __call__(self, series):
        return core.INVERT_FLAG(series, na_value=self.na_value, item=self.item)


@wrap_function(core.UPDOWN_FLAG)
class UPDOWN_FLAG(Operand):
    def __init__(self, up_level: float = 0.0, down_level: float = 0.0, *, up_flag: float = 1.0, down_flag: float = 0.0, start_flag: float = nan, item: str = None):
        self.up_level = up_level
        self.down_level = down_level
        self.up_flag = up_flag
        self.down_flag = down_flag
        self.start_flag = start_flag
        self.item = item

    def __call__(self, series):
        return core.UPDOWN_FLAG(series, up_level=self.up_level, down_level=self.down_level, up_flag=self.up_flag, down_flag=self.down_flag, start_flag=self.start_flag, item=self.item)


@wrap_function(core.LOG)
class LOG(Operand):
    def __init__(self, *, item: str = None):
        self.item = item

    def __call__(self, series):
        return core.LOG(series, item=self.item)


@wrap_function(core.EXP)
class EXP(Operand):
    def __init__(self, *, item: str = None):
        self.item = item

    def __call__(self, series):
        return core.EXP(series, item=self.item)


@wrap_function(core.ROC)
class ROC(Operand):
    def __init__(self, period: int = 1, *, item: str = None):
        self.period = period
        self.item = item

    def __call__(self, series):
        return core.ROC(series, period=self.period, item=self.item)


@wrap_function(core.DIFF)
class DIFF(Operand):
    def __init__(self, period: int = 1, *, item: str = None):
        self.period = period
        self.item = item

    def __call__(self, series):
        return core.DIFF(series, period=self.period, item=self.item)


@wrap_function(core.MIN)
class MIN(Operand):
    def __init__(self, period: int, *, item: str = None):
        self.period = period
        self.item = item

    def __call__(self, series):
        return core.MIN(series, period=self.period, item=self.item)


@wrap_function(core.MAX)
class MAX(Operand):
    def __init__(self, period: int, *, item: str = None):
        self.period = period
        self.item = item

    def __call__(self, series):
        return core.MAX(series, period=self.period, item=self.item)


@wrap_function(core.SUM)
class SUM(Operand):
    def __init__(self, period: int, *, item: str = None):
        self.period = period
        self.item = item

    def __call__(self, series):
        return core.SUM(series, period=self.period, item=self.item)


@wrap_function(core.MAD)
class MAD(Operand):
    def __init__(self, period: int = 20, *, item: str = None):
        self.period = period
        self.item = item

    def __call__(self, series):
        return core.MAD(series, period=self.period, item=self.item)


@wrap_function(core.STDEV)
class STDEV(Operand):
    def __init__(self, period: int = 20, *, item: str = None):
        self.period = period
        self.item = item

    def __call__(self, series):
        return core.STDEV(series, period=self.period, item=self.item)


@wrap_function(core.SMA)
class SMA(Operand):
    def __init__(self, period: int, *, item: str = None):
        self.period = period
        self.item = item

    def __call__(self, series):
        return core.SMA(series, period=self.period, item=self.item)


@wrap_function(core.EMA)
class EMA(Operand):
    def __init__(self, period: int, *, adjust: bool = False, item: str = None):
        self.period = period
        self.adjust = adjust
        self.item = item

    def __call__(self, series):
        return core.EMA(series, period=self.period, adjust=self.adjust, item=self.item)


@wrap_function(core.RMA)
class RMA(Operand):
    def __init__(self, period: int, *, item: str = None):
        self.period = period
        self.item = item

    def __call__(self, series):
        return core.RMA(series, period=self.period, item=self.item)


@wrap_function(core.WMA)
class WMA(Operand):
    def __init__(self, period: int, *, item: str = None):
        self.period = period
        self.item = item

    def __call__(self, series):
        return core.WMA(series, period=self.period, item=self.item)


@wrap_function(core.DEMA)
class DEMA(Operand):
    def __init__(self, period: int, *, item: str = None):
        self.period = period
        self.item = item

    def __call__(self, series):
        return core.DEMA(series, period=self.period, item=self.item)


@wrap_function(core.TEMA)
class TEMA(Operand):
    def __init__(self, period: int = 20, *, item: str = None):
        self.period = period
        self.item = item

    def __call__(self, series):
        return core.TEMA(series, period=self.period, item=self.item)


@wrap_function(core.MA)
class MA(Operand):
    def __init__(self, period: int = 20, *, ma_type: str = None, item: str = None):
        self.period = period
        self.ma_type = ma_type
        self.item = item

    def __call__(self, series):
        return core.MA(series, period=self.period, ma_type=self.ma_type, item=self.item)


@wrap_function(core.RSI)
class RSI(Operand):
    def __init__(self, period: int = 14, *, item: str = None):
        self.period = period
        self.item = item

    def __call__(self, series):
        return core.RSI(series, period=self.period, item=self.item)


@wrap_function(core.PLUSDI)
class PLUSDI(Operand):
    def __init__(self, period: int = 14):
        self.period = period

    def __call__(self, prices):
        return core.PLUSDI(prices, period=self.period)


@wrap_function(core.MINUSDI)
class MINUSDI(Operand):
    def __init__(self, period: int = 14):
        self.period = period

    def __call__(self, prices):
        return core.MINUSDI(prices, period=self.period)


@wrap_function(core.ADX)
class ADX(Operand):
    def __init__(self, period: int = 14):
        self.period = period

    def __call__(self, prices):
        return core.ADX(prices, period=self.period)


@wrap_function(core.TRANGE)
class TRANGE(Operand):
    def __init__(self, *, log_prices: bool = False, percent: bool = False):
        self.log_prices = log_prices
        self.percent = percent

    def __call__(self, prices):
        return core.TRANGE(prices, log_prices=self.log_prices, percent=self.percent)


@wrap_function(core.ATR)
class ATR(Operand):
    def __init__(self, period: int = 14):
        self.period = period

    def __call__(self, prices):
        return core.ATR(prices, period=self.period)


@wrap_function(core.NATR)
class NATR(Operand):
    def __init__(self, period: int = 14):
        self.period = period

    def __call__(self, prices):
        return core.NATR(prices, period=self.period)


@wrap_function(core.LATR)
class LATR(Operand):
    def __init__(self, period: int = 14):
        self.period = period

    def __call__(self, prices):
        return core.LATR(prices, period=self.period)


@wrap_function(core.PSAR)
class PSAR(Operand):
    def __init__(self, afs: float = 0.02, maxaf: float = 0.2):
        self.afs = afs
        self.maxaf = maxaf

    def __call__(self, prices):
        return core.PSAR(prices, afs=self.afs, maxaf=self.maxaf)


@wrap_function(core.CCI)
class CCI(Operand):
    def __init__(self, period: int = 20):
        self.period = period

    def __call__(self, prices):
        return core.CCI(prices, period=self.period)


@wrap_function(core.CMF)
class CMF(Operand):
    def __init__(self, period: int = 20):
        self.period = period

    def __call__(self, prices):
        return core.CMF(prices, period=self.period)


@wrap_function(core.MFI)
class MFI(Operand):
    def __init__(self, period: int = 14):
        self.period = period

    def __call__(self, prices):
        return core.MFI(prices, period=self.period)


@wrap_function(core.BOP)
class BOP(Operand):
    def __init__(self, period: int = 20):
        self.period = period

    def __call__(self, prices):
        return core.BOP(prices, period=self.period)


@wrap_function(core.BBANDS)
class BBANDS(Operand):
    def __init__(self, period: int = 20, nbdev: float = 2.0):
        self.period = period
        self.nbdev = nbdev

    def __call__(self, prices):
        return core.BBANDS(prices, period=self.period, nbdev=self.nbdev)


@wrap_function(core.KELTNER)
class KELTNER(Operand):
    def __init__(self, period: int = 20, nbatr: float = 2.0):
        self.period = period
        self.nbatr = nbatr

    def __call__(self, prices):
        return core.KELTNER(prices, period=self.period, nbatr=self.nbatr)


@wrap_function(core.EFFICIENCY_RATIO)
class EFFICIENCY_RATIO(Operand):
    def __init__(self, period: int = 10, *, item: str = None):
        self.period = period
        self.item = item

    def __call__(self, series):
        return core.EFFICIENCY_RATIO(series, period=self.period, item=self.item)


@wrap_function(core.KAMA)
class KAMA(Operand):
    def __init__(self, period: int = 10, fastn: int = 2, slown: int = 30, *, item: str = None):
        self.period = period
        self.fastn = fastn
        self.slown = slown
        self.item = item

    def __call__(self, series):
        return core.KAMA(series, period=self.period, fastn=self.fastn, slown=self.slown, item=self.item)


@wrap_function(core.MACD)
class MACD(Operand):
    def __init__(self, n1: int = 12, n2: int = 26, n3: int = 9, *, item: str = None):
        self.n1 = n1
        self.n2 = n2
        self.n3 = n3
        self.item = item

    def __call__(self, series):
        return core.MACD(series, n1=self.n1, n2=self.n2, n3=self.n3, item=self.item)


@wrap_function(core.PPO)
class PPO(Operand):
    def __init__(self, n1: int = 12, n2: int = 26, n3: int = 9, *, item: str = None):
        self.n1 = n1
        self.n2 = n2
        self.n3 = n3
        self.item = item

    def __call__(self, series):
        return core.PPO(series, n1=self.n1, n2=self.n2, n3=self.n3, item=self.item)


@wrap_function(core.SLOPE)
class SLOPE(Operand):
    def __init__(self, period: int = 20, *, option: int = 0, offset: int = 0, item: str = None):
        self.period = period
        self.option = option
        self.offset = offset
        self.item = item

    def __call__(self, series):
        return core.SLOPE(series, period=self.period, option=self.option, offset=self.offset, item=self.item)


@wrap_function(core.CURVE)
class CURVE(Operand):
    def __init__(self, period: int = 20, *, option: int = 0, offset: int = 0, item: str = None):
        self.period = period
        self.option = option
        self.offset = offset
        self.item = item

    def __call__(self, series):
        return core.CURVE(series, period=self.period, option=self.option, offset=self.offset, item=self.item)


@wrap_function(core.STOCH)
class STOCH(Operand):
    def __init__(self, period: int = 14, fastn: int = 3, slown: int = 3):
        self.period = period
        self.fastn = fastn
        self.slown = slown

    def __call__(self, prices):
        return core.STOCH(prices, period=self.period, fastn=self.fastn, slown=self.slown)


@wrap_function(core.STREAK_UP)
class STREAK_UP(Operand):
    def __init__(self, *, item: str = None):
        self.item = item

    def __call__(self, series):
        return core.STREAK_UP(series, item=self.item)


@wrap_function(core.STREAK_DOWN)
class STREAK_DOWN(Operand):
    def __init__(self, *, item: str = None):
        self.item = item

    def __call__(self, series):
        return core.STREAK_DOWN(series, item=self.item)


@wrap_function(core.EVAL)
class EVAL(Operand):
    def __init__(self, expr: str):
        self.expr = expr

    def __call__(self, prices):
        return core.EVAL(prices, expr=self.expr)


__all__ = [n for n in dir() if n.isupper()]
